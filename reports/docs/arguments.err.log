Traceback (most recent call last):
  File "/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1314, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 165, in wrapped
    return loop.run_until_complete(inner)
  File "/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 709, in async_execute
    await self.async_execute_cell(
  File "/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/nbclient/client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import plotly.graph_objects as go
import pandas as pd

crimes_1 = pd.read_csv("DLOs_europe_1.csv")
crimes_2 = pd.read_csv("DLOs_europe_2.csv")

crimes_df1 = pd.DataFrame(crimes_1)
crimes_df2 = pd.DataFrame(crimes_2)

years = ['2022','2021','2020','2019','2018','2017','2016','2015','2014','2013','2012','2011','2010','2009','2008','2007']

def compare_values(self_value, other_value):
    if pd.isna(self_value) and pd.isna(other_value):
        return np.nan
    elif pd.isna(self_value):
        return other_value
    elif pd.isna(other_value):
        return self_value
    elif self_value == other_value:
        return self_value
    else:
        return (self_value + other_value) / 2

combined_crimes = {'Country': crimes_df1['Country']}
for year in years:
    if year in crimes_df1.columns and year in crimes_df2.columns:
        combined_crimes[year] = crimes_df1.apply(
            lambda row: compare_values(
                row[year], 
                crimes_df2.loc[crimes_df2['Country'] == row['Country'], year].values[0]
                if row['Country'] in crimes_df2['Country'].values else np.nan 
            ), axis=1
        )
    elif year in crimes_df1.columns:
        combined_crimes[year] = crimes_df1[year]
    elif year in crimes_df2.columns:
        combined_crimes[year] = crimes_df2[year]
    else:
        combined_crimes[year] = np.nan

crimes_combined_df = pd.DataFrame(combined_crimes)


def create_bar_plot(countries):
    fig = go.Figure()

    for country in countries:
        country_data = crimes_combined_df[crimes_combined_df['Country'] == country]

        fig.add_trace(go.Bar(
            x=years,
            y=country_data[years].values[0],
            name=country,
            width=0.2
        ))

    fig.update_layout(
        barmode='group',
        title="Amount of drug crimes per year",
        xaxis_title="Year",
        yaxis_title="Amount of Cases",
        template="plotly_white"
    )
    return fig

fig = create_bar_plot(['Portugal', 'Italy','France', 'Spain'])

buttons = [
    dict(
        args=[
            {'x': [years] * 4,
             'y': [[crimes_combined_df[crimes_combined_df['Country'] == country][year].values[0]
                    for year in years]
                   for country in ['Portugal', 'Italy', 'France', 'Spain']],
             'name': ['Portugal', 'Italy', 'France', 'Spain']}
        ],
        label='Culturally similar countries',
        method='update'
    ),
    dict(
        args=[
            {'x': [years] * 4,
             'y': [[crimes_combined_df[crimes_combined_df['Country'] == country][year].values[0]
                    for year in years]
                   for country in ['Portugal', 'Netherlands', 'Belgium', 'Denmark']],
             'name': ['Portugal', 'Netherlands', 'Belgium', 'Denmark']}
        ],
        label='Active harm reduction policies',
        method='update'
    )
]

fig.update_layout(
    updatemenus=[
        dict(
            buttons=buttons,
            direction='down',
            showactive=True,
            x=0.5,
            xanchor='center',
            y=1.1,
            yanchor='top'
        ),
    ]
)

fig.show()
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mNameError[0m                                 Traceback (most recent call last)
Cell [0;32mIn[1], line 27[0m
[1;32m     25[0m [38;5;28;01mfor[39;00m year [38;5;129;01min[39;00m years:
[1;32m     26[0m     [38;5;28;01mif[39;00m year [38;5;129;01min[39;00m crimes_df1[38;5;241m.[39mcolumns [38;5;129;01mand[39;00m year [38;5;129;01min[39;00m crimes_df2[38;5;241m.[39mcolumns:
[0;32m---> 27[0m         combined_crimes[year] [38;5;241m=[39m [43mcrimes_df1[49m[38;5;241;43m.[39;49m[43mapply[49m[43m([49m
[1;32m     28[0m [43m            [49m[38;5;28;43;01mlambda[39;49;00m[43m [49m[43mrow[49m[43m:[49m[43m [49m[43mcompare_values[49m[43m([49m
[1;32m     29[0m [43m                [49m[43mrow[49m[43m[[49m[43myear[49m[43m][49m[43m,[49m[43m [49m
[1;32m     30[0m [43m                [49m[43mcrimes_df2[49m[38;5;241;43m.[39;49m[43mloc[49m[43m[[49m[43mcrimes_df2[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[43m [49m[38;5;241;43m==[39;49m[43m [49m[43mrow[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43m [49m[43myear[49m[43m][49m[38;5;241;43m.[39;49m[43mvalues[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m
[1;32m     31[0m [43m                [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mrow[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mcrimes_df2[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241;43m.[39;49m[43mvalues[49m[43m [49m[38;5;28;43;01melse[39;49;00m[43m [49m[43mnp[49m[38;5;241;43m.[39;49m[43mnan[49m[43m [49m
[1;32m     32[0m [43m            [49m[43m)[49m[43m,[49m[43m [49m[43maxis[49m[38;5;241;43m=[39;49m[38;5;241;43m1[39;49m
[1;32m     33[0m [43m        [49m[43m)[49m
[1;32m     34[0m     [38;5;28;01melif[39;00m year [38;5;129;01min[39;00m crimes_df1[38;5;241m.[39mcolumns:
[1;32m     35[0m         combined_crimes[year] [38;5;241m=[39m crimes_df1[year]

File [0;32m/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/pandas/core/frame.py:10374[0m, in [0;36mDataFrame.apply[0;34m(self, func, axis, raw, result_type, args, by_row, engine, engine_kwargs, **kwargs)[0m
[1;32m  10360[0m [38;5;28;01mfrom[39;00m [38;5;21;01mpandas[39;00m[38;5;21;01m.[39;00m[38;5;21;01mcore[39;00m[38;5;21;01m.[39;00m[38;5;21;01mapply[39;00m [38;5;28;01mimport[39;00m frame_apply
[1;32m  10362[0m op [38;5;241m=[39m frame_apply(
[1;32m  10363[0m     [38;5;28mself[39m,
[1;32m  10364[0m     func[38;5;241m=[39mfunc,
[0;32m   (...)[0m
[1;32m  10372[0m     kwargs[38;5;241m=[39mkwargs,
[1;32m  10373[0m )
[0;32m> 10374[0m [38;5;28;01mreturn[39;00m [43mop[49m[38;5;241;43m.[39;49m[43mapply[49m[43m([49m[43m)[49m[38;5;241m.[39m__finalize__([38;5;28mself[39m, method[38;5;241m=[39m[38;5;124m"[39m[38;5;124mapply[39m[38;5;124m"[39m)

File [0;32m/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/pandas/core/apply.py:916[0m, in [0;36mFrameApply.apply[0;34m(self)[0m
[1;32m    913[0m [38;5;28;01melif[39;00m [38;5;28mself[39m[38;5;241m.[39mraw:
[1;32m    914[0m     [38;5;28;01mreturn[39;00m [38;5;28mself[39m[38;5;241m.[39mapply_raw(engine[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mengine, engine_kwargs[38;5;241m=[39m[38;5;28mself[39m[38;5;241m.[39mengine_kwargs)
[0;32m--> 916[0m [38;5;28;01mreturn[39;00m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mapply_standard[49m[43m([49m[43m)[49m

File [0;32m/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/pandas/core/apply.py:1063[0m, in [0;36mFrameApply.apply_standard[0;34m(self)[0m
[1;32m   1061[0m [38;5;28;01mdef[39;00m [38;5;21mapply_standard[39m([38;5;28mself[39m):
[1;32m   1062[0m     [38;5;28;01mif[39;00m [38;5;28mself[39m[38;5;241m.[39mengine [38;5;241m==[39m [38;5;124m"[39m[38;5;124mpython[39m[38;5;124m"[39m:
[0;32m-> 1063[0m         results, res_index [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mapply_series_generator[49m[43m([49m[43m)[49m
[1;32m   1064[0m     [38;5;28;01melse[39;00m:
[1;32m   1065[0m         results, res_index [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39mapply_series_numba()

File [0;32m/usr/local/Caskroom/miniconda/base/envs/jupyterbook/lib/python3.10/site-packages/pandas/core/apply.py:1081[0m, in [0;36mFrameApply.apply_series_generator[0;34m(self)[0m
[1;32m   1078[0m [38;5;28;01mwith[39;00m option_context([38;5;124m"[39m[38;5;124mmode.chained_assignment[39m[38;5;124m"[39m, [38;5;28;01mNone[39;00m):
[1;32m   1079[0m     [38;5;28;01mfor[39;00m i, v [38;5;129;01min[39;00m [38;5;28menumerate[39m(series_gen):
[1;32m   1080[0m         [38;5;66;03m# ignore SettingWithCopy here in case the user mutates[39;00m
[0;32m-> 1081[0m         results[i] [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mfunc[49m[43m([49m[43mv[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43margs[49m[43m,[49m[43m [49m[38;5;241;43m*[39;49m[38;5;241;43m*[39;49m[38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43mkwargs[49m[43m)[49m
[1;32m   1082[0m         [38;5;28;01mif[39;00m [38;5;28misinstance[39m(results[i], ABCSeries):
[1;32m   1083[0m             [38;5;66;03m# If we have a view on v, we need to make a copy because[39;00m
[1;32m   1084[0m             [38;5;66;03m#  series_generator will swap out the underlying data[39;00m
[1;32m   1085[0m             results[i] [38;5;241m=[39m results[i][38;5;241m.[39mcopy(deep[38;5;241m=[39m[38;5;28;01mFalse[39;00m)

Cell [0;32mIn[1], line 28[0m, in [0;36m<lambda>[0;34m(row)[0m
[1;32m     25[0m [38;5;28;01mfor[39;00m year [38;5;129;01min[39;00m years:
[1;32m     26[0m     [38;5;28;01mif[39;00m year [38;5;129;01min[39;00m crimes_df1[38;5;241m.[39mcolumns [38;5;129;01mand[39;00m year [38;5;129;01min[39;00m crimes_df2[38;5;241m.[39mcolumns:
[1;32m     27[0m         combined_crimes[year] [38;5;241m=[39m crimes_df1[38;5;241m.[39mapply(
[0;32m---> 28[0m             [38;5;28;01mlambda[39;00m row: [43mcompare_values[49m[43m([49m
[1;32m     29[0m [43m                [49m[43mrow[49m[43m[[49m[43myear[49m[43m][49m[43m,[49m[43m [49m
[1;32m     30[0m [43m                [49m[43mcrimes_df2[49m[38;5;241;43m.[39;49m[43mloc[49m[43m[[49m[43mcrimes_df2[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[43m [49m[38;5;241;43m==[39;49m[43m [49m[43mrow[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[43m,[49m[43m [49m[43myear[49m[43m][49m[38;5;241;43m.[39;49m[43mvalues[49m[43m[[49m[38;5;241;43m0[39;49m[43m][49m
[1;32m     31[0m [43m                [49m[38;5;28;43;01mif[39;49;00m[43m [49m[43mrow[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[43m [49m[38;5;129;43;01min[39;49;00m[43m [49m[43mcrimes_df2[49m[43m[[49m[38;5;124;43m'[39;49m[38;5;124;43mCountry[39;49m[38;5;124;43m'[39;49m[43m][49m[38;5;241;43m.[39;49m[43mvalues[49m[43m [49m[38;5;28;43;01melse[39;49;00m[43m [49m[43mnp[49m[38;5;241;43m.[39;49m[43mnan[49m[43m [49m
[1;32m     32[0m [43m            [49m[43m)[49m, axis[38;5;241m=[39m[38;5;241m1[39m
[1;32m     33[0m         )
[1;32m     34[0m     [38;5;28;01melif[39;00m year [38;5;129;01min[39;00m crimes_df1[38;5;241m.[39mcolumns:
[1;32m     35[0m         combined_crimes[year] [38;5;241m=[39m crimes_df1[year]

Cell [0;32mIn[1], line 14[0m, in [0;36mcompare_values[0;34m(self_value, other_value)[0m
[1;32m     12[0m [38;5;28;01mdef[39;00m [38;5;21mcompare_values[39m(self_value, other_value):
[1;32m     13[0m     [38;5;28;01mif[39;00m pd[38;5;241m.[39misna(self_value) [38;5;129;01mand[39;00m pd[38;5;241m.[39misna(other_value):
[0;32m---> 14[0m         [38;5;28;01mreturn[39;00m [43mnp[49m[38;5;241m.[39mnan
[1;32m     15[0m     [38;5;28;01melif[39;00m pd[38;5;241m.[39misna(self_value):
[1;32m     16[0m         [38;5;28;01mreturn[39;00m other_value

[0;31mNameError[0m: name 'np' is not defined

